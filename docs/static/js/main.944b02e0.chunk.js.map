{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","interval","birthday","getNextBirthday","state","time","Date","now","curYear","getFullYear","getTime","this","setInterval","setState","clearInterval","delta","Math","abs","days","floor","hours","minutes","someDate","today","getDate","getMonth","text","getDateDiff","isToday","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA4EeA,E,kDAhEb,WAAYC,GAAiB,IAAD,8BAC1B,cAAMA,IAJRC,cAG4B,IAF5BC,SAAW,EAAKC,kBAId,EAAKC,MAAQ,CACXC,KAAMC,KAAKC,OAHa,E,mDAO5B,WACE,IAAMC,EAAU,IAAIF,KAAKA,KAAKC,OAAOE,cACjCP,EAAW,IAAII,KAAKE,EAAS,EAAG,IAKpC,OAHIN,EAASQ,UAAYJ,KAAKC,MAAQ,IACnCL,EAAW,IAAII,KAAKE,EAAU,EAAG,EAAG,KAEhCN,I,+BAGT,WAAqB,IAAD,OAClBS,KAAKV,SAAWW,aAAY,kBAAM,EAAKC,SAAS,CAAER,KAAMC,KAAKC,UAAU,O,kCAEzE,WACEO,cAAcH,KAAKV,Y,yBAGrB,WACE,IAAIc,EAAQC,KAAKC,IAAIN,KAAKT,SAASQ,UAAYC,KAAKP,MAAMC,MAAQ,IAC9Da,EAAOF,KAAKG,MAAMJ,EAAQ,OAC9BA,GAAgB,MAAPG,EACT,IAAIE,EAAQJ,KAAKG,MAAMJ,EAAQ,MAAQ,GACvCA,GAAiB,KAARK,EACT,IAAIC,EAAUL,KAAKG,MAAMJ,EAAQ,IAAM,GAKvC,OAJAA,GAAmB,GAAVM,EAGEH,EAAO,SAAWE,EAAQ,UAAYC,EAAU,YAF7CL,KAAKG,MAAMJ,EAAQ,IAEkD,a,qBAIrF,SAAQO,GACN,IAAMC,EAAQ,IAAIjB,KAClB,OAAOgB,EAASE,YAAcD,EAAMC,WAClCF,EAASG,aAAeF,EAAME,a,oBAGlC,WACE,IAAIC,EAAOf,KAAKgB,cAIhB,OAHIhB,KAAKiB,QAAQjB,KAAKT,YACpBwB,EAAO,yCAGP,qBAAKG,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gEAGA,4BACGH,a,GA5DKI,IAAMC,WCMTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.944b02e0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ninterface IProps {}\ninterface IState {\n  time: number\n}\n\nclass App extends React.Component<IProps, IState> {\n  interval : any;\n  birthday = this.getNextBirthday();\n\n  constructor(props : IProps) {\n    super(props);\n    this.state = {\n      time: Date.now()\n    };\n  }\n\n  getNextBirthday() {\n    const curYear = new Date(Date.now()).getFullYear();\n    var birthday = new Date(curYear, 7, 24);\n\n    if (birthday.getTime() - Date.now() < 0) {\n       birthday = new Date(curYear + 1, 7, 24)\n    }\n    return birthday;\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  getDateDiff() {    \n    var delta = Math.abs(this.birthday.getTime() - this.state.time) / 1000;\n    var days = Math.floor(delta / 86400);\n    delta -= days * 86400;\n    var hours = Math.floor(delta / 3600) % 24;\n    delta -= hours * 3600;\n    var minutes = Math.floor(delta / 60) % 60;\n    delta -= minutes * 60;\n    var seconds = Math.floor(delta % 60);\n\n    var text = days + \" days \" + hours + \" hours \" + minutes + \" minutes \" + seconds + \" seconds\";\n    return text;\n  }\n\n  isToday(someDate : Date) {\n    const today = new Date()\n    return someDate.getDate() === today.getDate() &&\n      someDate.getMonth() === today.getMonth()\n  }    \n\n  render() {\n    var text = this.getDateDiff();\n    if (this.isToday(this.birthday)) {\n      text = \"It's TODAY!! Happy Birthday Shivani!!\"\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Countdown to Shivani's Birthday\n          </p>\n          <p>\n            {text}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}